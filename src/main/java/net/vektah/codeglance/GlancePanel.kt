/*
 * Copyright Â© 2013, Adam Scarr
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
 * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

package net.vektah.codeglance

import com.intellij.openapi.components.ServiceManager
import com.intellij.openapi.diagnostic.Logger
import com.intellij.openapi.editor.colors.ColorKey
import com.intellij.openapi.editor.event.*
import com.intellij.openapi.fileEditor.FileEditor
import com.intellij.openapi.fileEditor.TextEditor
import com.intellij.openapi.fileTypes.SyntaxHighlighterFactory
import com.intellij.openapi.project.Project
import com.intellij.psi.PsiDocumentManager
import com.intellij.ui.JBColor
import net.vektah.codeglance.concurrent.DirtyLock
import net.vektah.codeglance.config.Config
import net.vektah.codeglance.config.ConfigService
import net.vektah.codeglance.render.CoordinateHelper
import net.vektah.codeglance.render.Minimap
import net.vektah.codeglance.render.TaskRunner

import javax.swing.*
import java.awt.*
import java.awt.event.*
import java.awt.image.BufferedImage
import java.lang.ref.SoftReference

/**
 * This JPanel gets injected into editor windows and renders a image generated by GlanceFileRenderer
 */
class GlancePanel(private val project: Project, fileEditor: FileEditor, private val container: JPanel, private val runner: TaskRunner) : JPanel(), VisibleAreaListener {
    private val editor = (fileEditor as TextEditor).editor
    private var mapRef: SoftReference<Minimap>
    private val logger = Logger.getInstance(javaClass.name)
    private val coords = CoordinateHelper()
    private val configService = ServiceManager.getService(ConfigService::class.java)
    private var config: Config = configService.state!!
    private var lastFoldCount = -1
    private var lastPanel: BufferedImage? = null
    private val renderLock = DirtyLock()
    private val scrollbar = Scrollbar(editor, coords)

    // Anonymous Listeners that should be cleaned up.
    private val componentListener: ComponentListener
    private val documentListener: DocumentListener
    private val selectionListener: SelectionListener

    private val isDisabled: Boolean
        get() = config.disabled || editor.document.textLength > config.maxFileSize || editor.document.lineCount < config.minLineCount

    private val onConfigChange = {
        readConfig()
        updateImage()
        updateSize()
        this@GlancePanel.revalidate()
        this@GlancePanel.repaint()
    }

    init {
        componentListener = object : ComponentAdapter() {
            override fun componentResized(componentEvent: ComponentEvent?) {
                updateSize()
                this@GlancePanel.revalidate()
                this@GlancePanel.repaint()
            }
        }
        container.addComponentListener(componentListener)

        documentListener = object : DocumentAdapter() {
            override fun documentChanged(documentEvent: DocumentEvent?) {
                updateImage()
            }
        }
        editor.document.addDocumentListener(documentListener)

        configService.onChange(onConfigChange)

        readConfig()

        editor.scrollingModel.addVisibleAreaListener(this)

        selectionListener = SelectionListener { repaint() }
        editor.selectionModel.addSelectionListener(selectionListener)
        updateSize()
        mapRef = SoftReference(Minimap(configService.state!!))

        updateImage()

        isOpaque = true
        layout = BorderLayout()
        add(scrollbar)
    }

    private fun readConfig() {
        config = configService.state!!

        coords.setPixelsPerLine(config.pixelsPerLine)
    }

    /**
     * Adjusts the panels size to be a percentage of the total window
     */
    private fun updateSize() {
        if (isDisabled) {
            preferredSize = Dimension(0, 0)
        } else {
            val size = Dimension(config.width, 0)
            preferredSize = size
        }
    }

    /**
     * Fires off a new task to the worker thread. This should only be called from the ui thread.
     */
    private fun updateImage() {
        if (isDisabled) return
        if (project.isDisposed) return

        val file = PsiDocumentManager.getInstance(project).getPsiFile(editor.document) ?: return

        if (!renderLock.acquire()) return

        val hl = SyntaxHighlighterFactory.getSyntaxHighlighter(file.language, project, file.virtualFile)

        var map = mapRef.get()
        if (map == null) {
            map = Minimap(configService.state!!)
            mapRef = SoftReference<Minimap>(map)
        }

        val text = editor.document.text
        val folds = editor.foldingModel.allFoldRegions.clone()

        runner.run {
            map.update(text, editor.colorsScheme, hl, folds)

            renderLock.release()

            if (renderLock.dirty) {
                updateImageSoon()
                renderLock.clean()
            }

            repaint()
        }
    }

    private fun updateImageSoon() = SwingUtilities.invokeLater { updateImage() }

    override fun paint(gfx: Graphics?) {
        val g = gfx as Graphics2D
        g.color = editor.colorsScheme.defaultBackground
        g.fillRect(0, 0, width, height)

        if (editor.document.textLength == 0) return

        val documentEndY = editor.logicalPositionToXY(editor.offsetToLogicalPosition(editor.document.textLength - 1)).getY()
        val visibleArea = editor.scrollingModel.visibleArea

        coords.setPanelHeight(height)
            .setPanelWidth(width)
            .setPercentageComplete(visibleArea.minY / (documentEndY - (visibleArea.maxY - visibleArea.minY)))

        val dest = coords.imageDestination

        if (renderLock.locked) {
            if (lastPanel != null) {
                g.drawImage(lastPanel,
                        dest.x, dest.y, dest.width, dest.height,
                        0, 0, lastPanel!!.width, lastPanel!!.height,
                        null)
            }
            scrollbar.paint(gfx)
            return
        }

        paintSelection(g)

        val minimap = mapRef.get()
        if (minimap == null) {
            updateImageSoon()
            scrollbar.paint(gfx)
            return
        }

        coords.setMinimap(minimap)

        val src = coords.imageSource

        // Draw the image and scale it to stretch vertically.
        g.drawImage(
            minimap.img, // source image
            dest.x, dest.y, dest.width, dest.height,
            src.x, src.y, src.width, src.height,
            null
        )

        if (dest.height > 0 && dest.width > 0) {
            lastPanel = BufferedImage(dest.width, dest.height, BufferedImage.TYPE_4BYTE_ABGR)
            lastPanel!!.graphics.drawImage(
                minimap.img,
                dest.x, dest.y, dest.width, dest.height,
                src.x, src.y, src.width, src.height,
                null
            )
        }
        scrollbar.paint(gfx)
    }

    private fun paintSelection(g: Graphics2D) {
        val selectionStartOffset = editor.selectionModel.selectionStart
        val selectionEndOffset = editor.selectionModel.selectionEnd
        val firstSelectedLine = coords.offsetToScreenSpace(selectionStartOffset)
        val firstSelectedCharacter = coords.offsetToCharacterInLine(selectionStartOffset)
        val lastSelectedLine = coords.offsetToScreenSpace(selectionEndOffset)
        val lastSelectedCharacter = coords.offsetToCharacterInLine(selectionEndOffset)

        g.composite = AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.90f)
        g.color = editor.colorsScheme.getColor(ColorKey.createColorKey("SELECTION_BACKGROUND", JBColor.BLUE))

        if (firstSelectedLine == lastSelectedLine) {
            // Single line is easy
            g.fillRect(firstSelectedCharacter, firstSelectedLine, lastSelectedCharacter - firstSelectedCharacter, config.pixelsPerLine)
        } else {
            // Draw the line leading in
            g.fillRect(firstSelectedCharacter, firstSelectedLine, width - firstSelectedCharacter, config.pixelsPerLine)

            // Then the line at the end
            g.fillRect(0, lastSelectedLine, lastSelectedCharacter, config.pixelsPerLine)

            if (firstSelectedLine + 1 != lastSelectedLine) {
                // And if there is anything in between, fill it in
                g.fillRect(0, firstSelectedLine + config.pixelsPerLine, width, lastSelectedLine - firstSelectedLine - config.pixelsPerLine)
            }
        }
    }

    override fun visibleAreaChanged(visibleAreaEvent: VisibleAreaEvent) {
        // TODO pending http://youtrack.jetbrains.com/issue/IDEABKL-1141 - once fixed this should be a listener
        var currentFoldCount = 0
        for (fold in editor.foldingModel.allFoldRegions) {
            if (!fold.isExpanded) {
                currentFoldCount++
            }
        }

        if (currentFoldCount != lastFoldCount) {
            updateImage()
        }

        lastFoldCount = currentFoldCount

        updateSize()
        repaint()
    }

    fun onClose() {
        container.removeComponentListener(componentListener)
        editor.document.removeDocumentListener(documentListener)
        editor.selectionModel.removeSelectionListener(selectionListener)
        remove(scrollbar)

        mapRef.clear()
    }
}
